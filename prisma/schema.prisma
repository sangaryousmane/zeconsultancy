generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String?
  name      String
  role      Role     @default(USER)
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings     Booking[]
  otpTokens    OtpToken[]
  resetTokens  ResetToken[]

  @@index([role]) // For admin filtering
  @@index([createdAt]) // For admin sorting
  @@index([verified]) // For filtering verified users
  @@index([role, createdAt]) // Admin dashboard optimization
  @@map("users")
}

model OtpToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  type      OtpType
  userId    String   @db.ObjectId
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp_tokens")
}

model ResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @db.ObjectId
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reset_tokens")
}



model Booking {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  userId      String        @db.ObjectId
  serviceId   String?       @db.ObjectId
  equipmentId String?       @db.ObjectId
  brokerageId String?       @db.ObjectId
  type        BookingType   @default(SERVICE)
  startDate   DateTime
  endDate     DateTime?
  status      BookingStatus @default(PENDING)
  totalPrice  Float
  notes       String?
  adminNotes  String?
  phoneNumber String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  service   Service?   @relation(fields: [serviceId], references: [id])
  equipment Equipment? @relation(fields: [equipmentId], references: [id])
  brokerage Brokerage? @relation(fields: [brokerageId], references: [id])

  @@index([userId, createdAt])
  @@index([status])
  @@index([type])
  @@index([equipmentId])
  @@index([brokerageId])
  @@index([startDate, endDate])
  // Composite indexes for common filter combinations
  @@index([status, type])
  @@index([userId, status])
  @@index([equipmentId, status])
  @@index([brokerageId, status])
  @@index([status, startDate, endDate])
  @@map("bookings")
}

model Newsletter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("newsletter")
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  subject   String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("contacts")
}

model Category {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  description String?
  icon        String?
  type        CategoryType // EQUIPMENT or BROKERAGE
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  equipment Equipment[]
  brokerage Brokerage[]

  @@index([type])
  @@map("categories")
}

model Equipment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  categoryId  String    @db.ObjectId
  price       Float     // Price per day/hour
  priceType   PriceType @default(DAILY)
  images      String[]
  features    String[]
  available   Boolean   @default(true)
  location    String?
  condition   String?   // NEW, GOOD, FAIR
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  category Category @relation(fields: [categoryId], references: [id])
  bookings Booking[]

  @@index([available, createdAt])
  @@index([categoryId])
  @@index([price])
  @@index([priceType])
  @@index([location])
  @@index([createdAt]) // For admin sorting
  @@index([updatedAt]) // For admin sorting
  // Composite indexes for common filter combinations
  @@index([available, categoryId])
  @@index([available, price])
  @@index([categoryId, price])
  @@index([available, categoryId, price])
  @@index([priceType, available])
  @@index([available, createdAt, categoryId]) // Admin dashboard optimization
  @@index([categoryId, available, createdAt]) // Category filtering with sorting
  @@map("equipment")
}

model Brokerage {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  categoryId  String    @db.ObjectId
  price       Float
  priceType   PriceType @default(FIXED)
  images      String[]
  features    String[]
  location    String?
  available   Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  category Category @relation(fields: [categoryId], references: [id])
  bookings Booking[]

  @@index([available, createdAt])
  @@index([categoryId])
  @@index([price])
  @@index([priceType])
  @@index([location])
  @@index([createdAt]) // For admin sorting
  @@index([updatedAt]) // For admin sorting
  // Composite indexes for common filter combinations
  @@index([available, categoryId])
  @@index([available, price])
  @@index([categoryId, price])
  @@index([available, categoryId, price])
  @@index([priceType, available])
  @@index([location, available])
  @@index([available, createdAt, categoryId]) // Admin dashboard optimization
  @@index([categoryId, available, createdAt]) // Category filtering with sorting
  @@map("brokerage")
}

model Service {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  category    String
  icon        String?   // Icon name for the service category
  price       Float
  duration    String?
  features    String[]
  images      String[]
  available   Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  bookings Booking[]

  @@map("services")
}

enum Role {
  USER
  AGENT
  ADMIN
}

enum OtpType {
  REGISTRATION
  LOGIN
  PASSWORD_RESET
}



enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum BookingType {
  SERVICE
  EQUIPMENT
  BROKERAGE
}

enum CategoryType {
  EQUIPMENT
  BROKERAGE
}

enum PriceType {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  FIXED
}